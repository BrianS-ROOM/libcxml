# -*- mode: python -*-
#
#    Copyright (C) 2016 Carl Hetherington <cth@carlh.net>
#
#    This file is part of libcxml.
#
#    libcxml is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    libcxml is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with libcxml.  If not, see <http://www.gnu.org/licenses/>.
#

import os

def dependencies(target):
    return (('locked_sstream', '1edc182'),)

def build(target, options):
    cmd = './waf configure --prefix=%s' % target.directory
    if target.platform == 'linux':
        cmd += ' --static'
        if target.distro == 'centos':
            # Centos builds using static boost, which means tests don't
            # build as test/tests.cc defines BOOST_TEST_DYN_LINK
            cmd += ' --disable-tests'
            if target.version == '7':
                # Centos 7 ships with glibmm 2.50.0 which requires C++11
                # but its compiler (gcc 4.8.5) defaults to C++97.  Go figure.
                # I worry that this will cause ABI problems but I don't have
                # a better solution.
                cmd += ' --force-cpp11'
        if target.distro == 'mageia' and target.version == '6':
            # Mageia 6 pulls the same stunt except it's libxml++ that requires C++11
            cmd += ' --force-cpp11'
    elif target.platform == 'windows':
        # Similarly with Windows
        cmd += ' --force-cpp11 --target-windows'
    target.command(cmd)
    target.command('./waf build install')

def test(target, test):
    if target.platform != 'windows':
        target.set('LC_ALL', 'C')
        target.command('./run-tests.sh')

def make_doxygen(target):
    os.makedirs('build/doc')
    target.command('doxygen')
    return os.path.abspath('build/doc/html')
